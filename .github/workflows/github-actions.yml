name: Application CI
on: [push]
jobs:
    pipeline:
        name: jhipsterSampleApplication pipeline
        runs-on: ubuntu-latest
        if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
        timeout-minutes: 40
        env:
            NODE_VERSION: 14.17.1
            SPRING_OUTPUT_ANSI_ENABLED: DETECT
            SPRING_JPA_SHOW_SQL: false
            JHI_DISABLE_WEBPACK_LOGS: true
            NG_CLI_ANALYTICS: false
        steps:
            - uses: actions/setup-python@v2
              with:
                python-version: '3.10'
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install pandas
                pip install numpy
            - run: sudo apt update
            - run: sudo apt install inotify-tools
            - run: inotifywait -mr /home/runner/work/jhipster-sample-app/jhipster-sample-app/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
            - run: touch starting_pipeline_uses16_16
            - run: rm starting_pipeline_uses16_16
            - uses: actions/checkout@v2
            - run: touch starting_pipeline_uses17_17
            - run: rm starting_pipeline_uses17_17
            - uses: actions/setup-node@v1
              with:
                  node-version: 14.17.1
            - run: touch starting_pipeline_uses20_20
            - run: rm starting_pipeline_uses20_20
            - uses: actions/setup-java@v2
              with:
                  distribution: 'adopt'
                  java-version: '11.x'
            - run: touch starting_pipeline_Installnodejspackages_24
            - run: rm starting_pipeline_Installnodejspackages_24
            - name: Install node.js packages
              run: npm install
            - run: touch starting_pipeline_Runbackendtest_26
            - run: rm starting_pipeline_Runbackendtest_26
            - name: Run backend test
              run: |
                  chmod +x mvnw
                  npm run ci:backend:test
            - run: touch starting_pipeline_Runfrontendtest_30
            - run: rm starting_pipeline_Runfrontendtest_30
            - name: Run frontend test
              run: npm run ci:frontend:test
            - run: touch starting_pipeline_Packageapplication_32
            - run: rm starting_pipeline_Packageapplication_32
            - name: Package application
              run: npm run java:jar:prod
            - run: touch starting_pipeline_E2E_34
            - run: rm starting_pipeline_E2E_34
            - name: 'E2E: Package'
              run: npm run ci:e2e:package
            - run: touch starting_pipeline_E2E_36
            - run: rm starting_pipeline_E2E_36
            - name: 'E2E: Prepare'
              run: npm run ci:e2e:prepare
            - run: touch starting_pipeline_E2E_38
            - run: rm starting_pipeline_E2E_38
            - name: 'E2E: Run'
              run: npm run ci:e2e:run
            - run: touch starting_pipeline_E2E_40
            - run: rm starting_pipeline_E2E_40
            - name: 'E2E: Teardown'
              run: npm run ci:e2e:teardown
            - run: touch starting_finished_finished_8979874
            - run: rm starting_finished_finished_8979874
            - uses: jannekem/run-python-script-action@v1
              with:
                script: |
                  import pandas as pd
                  import numpy as np
                  import os
                  df = pd.read_csv('/home/runner/inotify-logs.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
                  df['event_filename'] = df['event_filename'].replace(np.nan, '')
                  steps = {}
                  starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
                  ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
                  starting_df = df[df['event_filename'].str.contains('starting_')]
                  touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
                  for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
                      steps[touch_file_name] = (ending_index, starting_index)
                  df['watched_filename'] = df['watched_filename'] + df['event_filename']
                  df.drop('event_filename', axis=1, inplace=True)
                  df.rename(columns={'watched_filename':'file_name'}, inplace=True)
                  modify_df = df[df['event_name'] == 'MODIFY']
                  file_names = modify_df['file_name'].value_counts().index.to_list()
                  info = []
                  for file_name in file_names:
                      last_access_step = ''
                      last_modify_step = ''
                      creation_step = ''
                      if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
                      else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
                      last_access_index = 0
                      if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                          last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
                      else:
                          last_access_index = -1
                          last_access_step = 'Not provided'
                      if last_access_index < last_modify_index:
                          try:
                              creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                          except:
                              creation_index = -1
                              creation_step = 'Not provided'
                          for touch_file_name, (starting_index, ending_index) in steps.items():
                              if (last_access_index > starting_index) and (last_access_index < ending_index):
                                  last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                              if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                                  last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                              if (creation_index > starting_index) and (creation_index < ending_index):
                                  creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                          if '/home/runner/work/jhipster-sample-app/jhipster-sample-app/.git/' not in file_name:
                              info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
                  info_df = pd.DataFrame(info)
                  step_statistics = []
                  for step, (starting_index, ending_index) in steps.items():
                      step_name = step if step == 'setup' else step.split('_')[1]
                      if step_name == 'finished': continue
                      created_file_count = info_df[info_df['creation_step'] == step_name].shape[0]
                      created_never_accessed_file_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_access_index'] == -1)].shape[0]
                      modified_files_after_accessed_count = info_df[(info_df['creation_step'] == step_name) & (info_df['last_modify_index'] > info_df['last_access_index'])].shape[0]
                      starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
                      if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
                      else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
                      hour = ending_time[0] - starting_time[0]
                      if starting_time[1] > ending_time[1]:
                          minute = ending_time[1] - starting_time[1] + 60
                          hour -= 1
                      else: minute = ending_time[1] - starting_time[1]
                      if starting_time[2] > ending_time[2]:
                          second = ending_time[2] - starting_time[2] + 60
                          minute -= 1
                      else: second = ending_time[2] - starting_time[2]
                      total_seconds = second + (minute * 60) + (hour * 60 * 60)
                      if step_name != '':
                          step_statistics.append({'step_name': step_name, 'number_of_created_files': created_file_count,
                           'number_of_files_created_never_accessed': created_never_accessed_file_count, 
                           'number_files_modified_after_accessed': modified_files_after_accessed_count, 'time': total_seconds})
                  os.mkdir('optimizing-ci-builds-ci-analysis')
                  step_df = pd.DataFrame(step_statistics)
                  step_df.to_csv('/home/runner/work/jhipster-sample-app/jhipster-sample-app/optimizing-ci-builds-ci-analysis/steps.csv')
                  info_df.to_csv('/home/runner/work/jhipster-sample-app/jhipster-sample-app/optimizing-ci-builds-ci-analysis/files.csv')
            - run: cp /home/runner/inotify-logs.csv /home/runner/work/jhipster-sample-app/jhipster-sample-app/optimizing-ci-builds-ci-analysis/
            - name: Pushes analysis to another repository
              id: push_directory
              uses: cpina/github-action-push-to-another-repository@main
              env:
                API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
              with:
                source-directory: 'optimizing-ci-builds-ci-analysis'
                destination-github-username: 'optimizing-ci-builds'
                destination-repository-name: 'ci-analyzes'
                target-directory: 'jhipster-sample-app/1666403540/.github/workflows/github-actions/pipeline'

